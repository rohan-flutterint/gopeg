Source: #Sequence*
#Sequence: (
    {tag:"span", class:"string"}:Token:(=~"'(\\.|[^'\\\\])*'" / =~"\"(\\.|[^\\\"\\\\])*\"") /
    {tag:"span", class:"keyword"}:Token:#Keywords /
    {tag:"span", class:"function"}:Token:(#Identifier &"(") /
    {tag:"span", class:"identifier"}:Token:#Identifier /
    {tag:"span", class:"number"}:Token:#Number /
    {tag:"span", class:"comment"}:Token:#Comment /
    None:.
)

#EndOfLine: "\n" / !.
#Comment: "#" (!#EndOfLine .)* &#EndOfLine
#Identifier: =~"[a-zA-Z][a-zA-Z0-9_]*"
#Number: =~"(\\+|-)?\\d+(.?)\\d+"

// import keyword; print(' / '.join(map(lambda x: f'"{x}"', keyword.kwlist)))
#Keywords: (
    "False" /
    "None" /
    "True" /
    "and" /
    "as" /
    "assert" /
    "async" /
    "await" /
    "break" /
    "class" /
    "continue" /
    "def" /
    "del" /
    "elif" /
    "else" /
    "except" /
    "finally" /
    "for" /
    "from" /
    "global" /
    "if" /
    "import" /
    "in" /
    "is" /
    "lambda" /
    "nonlocal" /
    "not" /
    "or" /
    "pass" /
    "raise" /
    "return" /
    "try" /
    "while" /
    "with" /
    "yield"
)
