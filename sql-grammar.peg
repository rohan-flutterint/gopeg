Expressions: (Expression {EndOfLine})*
Expression: (
    (#WithToken Alias:{Token} #AsToken)?
    #SelectToken (Column ({Control:","} Column)* / All:{Control:"*"})
    #FromToken Source
    ((#JoinToken Join) / ((#WhereToken Where)? (#GroupByToken GroupBy)?))
)

Column: (FunctionCall / Variable) #AsToken Alias:{Token}

Source: FunctionCall / {Token} / {Open} Expression {Close}

Where: Logic

GroupBy: Variable

Join: Source #OnToken Left:Variable {Control:"="} Right:Variable

FunctionCall: Name:{Token} {Open} (Argument ({Control:","} Argument)*)? {Close}
Argument: FunctionCall / Variable / {String} / Math

Math: MathPlus (AddOperation:{Control:=~"[+-]"} Math)*
MathPlus: MathValue (MultOperation:{Control:=~"[*/%]"} MathPlus)*
MathValue: Sign:{Control:=~"[+-]"}? (FunctionCall / Variable / {Number} / {Open} Math {Close})

Logic: LogicOr (#OrToken Logic)*
LogicOr: LogicValue (#AndToken LogicOr)*
LogicValue: Negation:#NotToken? (FunctionCall / LogicExpr / {Open} Logic {Close})
LogicExpr: Math Operator:{Control:=~"==|<=|>=|<|>"} Math

Variable: {Token} ({Control:"."} Variable)*

#SelectToken: {Token:=~"(?i)SELECT"}
#FromToken: {Token:=~"(?i)FROM"}
#WhereToken: {Token:=~"(?i)WHERE"}
#OrToken: {Token:=~"(?i)OR"}
#AndToken: {Token:=~"(?i)AND"}
#NotToken: {Token:=~"(?i)NOT"}
#AsToken: {Token:=~"(?i)AS"}
#GroupByToken: {Token:=~"(?i)GROUP"} {Token:=~"(?i)BY"}
#WithToken: {Token:=~"(?i)WITH"}
#JoinToken: {Token:=~"(?i)JOIN"}
#OnToken: {Token:=~"(?i)ON"}